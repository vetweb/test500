@use 'sass:map';
@use 'sass:list';
@use 'vars' as *;

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map.keys($breakpoints)) {
  $n: list.index($breakpoint-names, $name);
  @return if($n < list.length($breakpoint-names), list.nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map.get($breakpoints, $name);
  @return if($min !=0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) ==null, '', '-#{$name}');
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
// $htmlSelector - нужен для срабатывания медиа запроса на определенной цветовой схеме, например:
// @include up(md, $grid-breakpoints, "[data-theme='light']") - сработает только для светлой темы
@mixin up($name, $breakpoints: $grid-breakpoints, $htmlSelector: '') {
  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @each $size in $zoom-sizes {
      [data-zoom='#{$size}']#{$htmlSelector} & {
        @if $size != 100 {
          @media all and (min-width: calc($min * $size / 100)) {
            @content;
          }
        } @else {
          @media (min-width: calc($min * $size / 100)) {
            @content;
          }
        }
      }
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
// $htmlSelector - нужен для срабатывания медиа запроса на определенной цветовой схеме, например:
// @include down(md, $grid-breakpoints, "[data-theme='light']") - сработает только для светлой темы
@mixin down($name, $breakpoints: $grid-breakpoints, $htmlSelector: '') {
  $max: breakpoint-max($name, $breakpoints);

  @if $max {
    @each $size in $zoom-sizes {
      [data-zoom='#{$size}']#{$htmlSelector} & {
        @if $size != 100 {
          @media all and (max-width: calc($max * $size / 100)) {
            @content;
          }
        } @else {
          @media (max-width: calc($max * $size / 100)) {
            @content;
          }
        }
      }
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
// $htmlSelector - нужен для срабатывания медиа запроса на определенной цветовой схеме, например:
// @include between(md, lg, $grid-breakpoints, "[data-theme='light']") - сработает только для светлой темы
@mixin between($lower, $upper, $breakpoints: $grid-breakpoints, $htmlSelector: '') {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min !=null and $max !=null {
    @each $size in $zoom-sizes {
      [data-zoom='#{$size}']#{$htmlSelector} & {
        @if $size != 100 {
          @media all and (min-width: calc($min * $size / 100)) and (max-width: calc($max * $size / 100)) {
            @content;
          }
        } @else {
          @media (min-width: calc($min * $size / 100)) and (max-width: calc($max * $size / 100)) {
            @content;
          }
        }
      }
    }
  } @else if $max==null {
    @include up($lower, $breakpoints) {
      @content;
    }
  } @else if $min==null {
    @include down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
// $htmlSelector - нужен для срабатывания медиа запроса на определенной цветовой схеме, например:
// @include between(only, $grid-breakpoints, "[data-theme='light']") - сработает только для светлой темы
@mixin only($name, $breakpoints: $grid-breakpoints, $htmlSelector: '') {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min !=null and $max !=null {
    @each $size in $zoom-sizes {
      [data-zoom='#{$size}']#{$htmlSelector} & {
        @if $size != 100 {
          @media all and (min-width: calc($min * $size / 100)) and (max-width: calc($max * $size / 100)) {
            @content;
          }
        } @else {
          @media (min-width: calc($min * $size / 100)) and (max-width: calc($max * $size / 100)) {
            @content;
          }
        }
      }
    }
  } @else if $max==null {
    @include up($name, $breakpoints) {
      @content;
    }
  } @else if $min==null {
    @include down($name, $breakpoints) {
      @content;
    }
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container(
  $max-widths: $container-max-widths,
  $paddings: $container-paddings,
  $breakpoints: $grid-breakpoints
) {
  width: 100%;
  margin-right: auto;
  margin-left: auto;

  @each $breakpoint, $container-max-width in $max-widths {
    @include up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }

  @each $breakpoint, $container-padding in $paddings {
    @include up($breakpoint, $breakpoints) {
      padding-right: $container-padding;
      padding-left: $container-padding;
    }
  }

  @each $breakpoint, $container-padding in $container-paddings {
    &.#{$breakpoint}-full {
      @include only($breakpoint, $grid-breakpoints) {
        margin-right: -$container-padding;
        margin-left: -$container-padding;
      }
    }
  }
}
